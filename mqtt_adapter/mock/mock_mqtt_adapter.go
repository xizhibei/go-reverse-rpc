// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock/mock_mqtt_adapter.go
//

// Package mock_mqtt_adapter is a generated GoMock package.
package mock_mqtt_adapter

import (
	reflect "reflect"
	time "time"

	paho_mqtt_golang "github.com/eclipse/paho.mqtt.golang"
	mqtt_adapter "github.com/xizhibei/go-reverse-rpc/mqtt_adapter"
	gomock "go.uber.org/mock/gomock"
)

// MockMQTTClientAdapter is a mock of MQTTClientAdapter interface.
type MockMQTTClientAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockMQTTClientAdapterMockRecorder
}

// MockMQTTClientAdapterMockRecorder is the mock recorder for MockMQTTClientAdapter.
type MockMQTTClientAdapterMockRecorder struct {
	mock *MockMQTTClientAdapter
}

// NewMockMQTTClientAdapter creates a new mock instance.
func NewMockMQTTClientAdapter(ctrl *gomock.Controller) *MockMQTTClientAdapter {
	mock := &MockMQTTClientAdapter{ctrl: ctrl}
	mock.recorder = &MockMQTTClientAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQTTClientAdapter) EXPECT() *MockMQTTClientAdapterMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMQTTClientAdapter) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMQTTClientAdapterMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMQTTClientAdapter)(nil).Connect))
}

// ConnectAndWaitForSuccess mocks base method.
func (m *MockMQTTClientAdapter) ConnectAndWaitForSuccess() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConnectAndWaitForSuccess")
}

// ConnectAndWaitForSuccess indicates an expected call of ConnectAndWaitForSuccess.
func (mr *MockMQTTClientAdapterMockRecorder) ConnectAndWaitForSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAndWaitForSuccess", reflect.TypeOf((*MockMQTTClientAdapter)(nil).ConnectAndWaitForSuccess))
}

// Disconnect mocks base method.
func (m *MockMQTTClientAdapter) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMQTTClientAdapterMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMQTTClientAdapter)(nil).Disconnect))
}

// EnsureConnected mocks base method.
func (m *MockMQTTClientAdapter) EnsureConnected() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnsureConnected")
}

// EnsureConnected indicates an expected call of EnsureConnected.
func (mr *MockMQTTClientAdapterMockRecorder) EnsureConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureConnected", reflect.TypeOf((*MockMQTTClientAdapter)(nil).EnsureConnected))
}

// GetMqttClient mocks base method.
func (m *MockMQTTClientAdapter) GetMqttClient() paho_mqtt_golang.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMqttClient")
	ret0, _ := ret[0].(paho_mqtt_golang.Client)
	return ret0
}

// GetMqttClient indicates an expected call of GetMqttClient.
func (mr *MockMQTTClientAdapterMockRecorder) GetMqttClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMqttClient", reflect.TypeOf((*MockMQTTClientAdapter)(nil).GetMqttClient))
}

// IsConnected mocks base method.
func (m *MockMQTTClientAdapter) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockMQTTClientAdapterMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockMQTTClientAdapter)(nil).IsConnected))
}

// OffConnect mocks base method.
func (m *MockMQTTClientAdapter) OffConnect(idx int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OffConnect", idx)
}

// OffConnect indicates an expected call of OffConnect.
func (mr *MockMQTTClientAdapterMockRecorder) OffConnect(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffConnect", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OffConnect), idx)
}

// OffConnectLost mocks base method.
func (m *MockMQTTClientAdapter) OffConnectLost(idx int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OffConnectLost", idx)
}

// OffConnectLost indicates an expected call of OffConnectLost.
func (mr *MockMQTTClientAdapterMockRecorder) OffConnectLost(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffConnectLost", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OffConnectLost), idx)
}

// OnConnect mocks base method.
func (m *MockMQTTClientAdapter) OnConnect(cb mqtt_adapter.OnConnectCallback) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConnect", cb)
	ret0, _ := ret[0].(int)
	return ret0
}

// OnConnect indicates an expected call of OnConnect.
func (mr *MockMQTTClientAdapterMockRecorder) OnConnect(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnect", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OnConnect), cb)
}

// OnConnectLost mocks base method.
func (m *MockMQTTClientAdapter) OnConnectLost(cb mqtt_adapter.OnConnectLostCallback) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConnectLost", cb)
	ret0, _ := ret[0].(int)
	return ret0
}

// OnConnectLost indicates an expected call of OnConnectLost.
func (mr *MockMQTTClientAdapterMockRecorder) OnConnectLost(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnectLost", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OnConnectLost), cb)
}

// OnConnectLostOnce mocks base method.
func (m *MockMQTTClientAdapter) OnConnectLostOnce(cb mqtt_adapter.OnConnectLostCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConnectLostOnce", cb)
}

// OnConnectLostOnce indicates an expected call of OnConnectLostOnce.
func (mr *MockMQTTClientAdapterMockRecorder) OnConnectLostOnce(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnectLostOnce", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OnConnectLostOnce), cb)
}

// OnConnectOnce mocks base method.
func (m *MockMQTTClientAdapter) OnConnectOnce(cb mqtt_adapter.OnConnectCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConnectOnce", cb)
}

// OnConnectOnce indicates an expected call of OnConnectOnce.
func (mr *MockMQTTClientAdapterMockRecorder) OnConnectOnce(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnectOnce", reflect.TypeOf((*MockMQTTClientAdapter)(nil).OnConnectOnce), cb)
}

// Publish mocks base method.
func (m *MockMQTTClientAdapter) Publish(topic string, qos byte, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, qos, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMQTTClientAdapterMockRecorder) Publish(topic, qos, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMQTTClientAdapter)(nil).Publish), topic, qos, payload)
}

// PublishBytes mocks base method.
func (m *MockMQTTClientAdapter) PublishBytes(topic string, qos byte, retained bool, data []byte) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBytes", topic, qos, retained, data)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// PublishBytes indicates an expected call of PublishBytes.
func (mr *MockMQTTClientAdapterMockRecorder) PublishBytes(topic, qos, retained, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBytes", reflect.TypeOf((*MockMQTTClientAdapter)(nil).PublishBytes), topic, qos, retained, data)
}

// PublishWait mocks base method.
func (m *MockMQTTClientAdapter) PublishWait(topic string, qos byte, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWait", topic, qos, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWait indicates an expected call of PublishWait.
func (mr *MockMQTTClientAdapterMockRecorder) PublishWait(topic, qos, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWait", reflect.TypeOf((*MockMQTTClientAdapter)(nil).PublishWait), topic, qos, payload)
}

// PublishWaitTimeout mocks base method.
func (m *MockMQTTClientAdapter) PublishWaitTimeout(topic string, qos byte, timeout time.Duration, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWaitTimeout", topic, qos, timeout, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWaitTimeout indicates an expected call of PublishWaitTimeout.
func (mr *MockMQTTClientAdapterMockRecorder) PublishWaitTimeout(topic, qos, timeout, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWaitTimeout", reflect.TypeOf((*MockMQTTClientAdapter)(nil).PublishWaitTimeout), topic, qos, timeout, payload)
}

// Subscribe mocks base method.
func (m *MockMQTTClientAdapter) Subscribe(topic string, qos byte, onMsg mqtt_adapter.MessageCallback) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, qos, onMsg)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockMQTTClientAdapterMockRecorder) Subscribe(topic, qos, onMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMQTTClientAdapter)(nil).Subscribe), topic, qos, onMsg)
}

// SubscribeMultiple mocks base method.
func (m *MockMQTTClientAdapter) SubscribeMultiple(filters map[string]byte, onMsg mqtt_adapter.MessageCallback) paho_mqtt_golang.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMultiple", filters, onMsg)
	ret0, _ := ret[0].(paho_mqtt_golang.Token)
	return ret0
}

// SubscribeMultiple indicates an expected call of SubscribeMultiple.
func (mr *MockMQTTClientAdapterMockRecorder) SubscribeMultiple(filters, onMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMultiple", reflect.TypeOf((*MockMQTTClientAdapter)(nil).SubscribeMultiple), filters, onMsg)
}

// SubscribeWait mocks base method.
func (m *MockMQTTClientAdapter) SubscribeWait(topic string, qos byte, onMsg mqtt_adapter.MessageCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWait", topic, qos, onMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeWait indicates an expected call of SubscribeWait.
func (mr *MockMQTTClientAdapterMockRecorder) SubscribeWait(topic, qos, onMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWait", reflect.TypeOf((*MockMQTTClientAdapter)(nil).SubscribeWait), topic, qos, onMsg)
}

// Unsubscribe mocks base method.
func (m *MockMQTTClientAdapter) Unsubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockMQTTClientAdapterMockRecorder) Unsubscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockMQTTClientAdapter)(nil).Unsubscribe), topic)
}

// UnsubscribeAll mocks base method.
func (m *MockMQTTClientAdapter) UnsubscribeAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeAll indicates an expected call of UnsubscribeAll.
func (mr *MockMQTTClientAdapterMockRecorder) UnsubscribeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAll", reflect.TypeOf((*MockMQTTClientAdapter)(nil).UnsubscribeAll))
}
