// Code generated by MockGen. DO NOT EDIT.
// Source: reverse_rpc.go

// Package mock_reverse_rpc is a generated GoMock package.
package mock_reverse_rpc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reverse_rpc "github.com/xizhibei/go-reverse-rpc"
)

// MockReverseRPC is a mock of ReverseRPC interface.
type MockReverseRPC struct {
	ctrl     *gomock.Controller
	recorder *MockReverseRPCMockRecorder
}

// MockReverseRPCMockRecorder is the mock recorder for MockReverseRPC.
type MockReverseRPCMockRecorder struct {
	mock *MockReverseRPC
}

// NewMockReverseRPC creates a new mock instance.
func NewMockReverseRPC(ctrl *gomock.Controller) *MockReverseRPC {
	mock := &MockReverseRPC{ctrl: ctrl}
	mock.recorder = &MockReverseRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseRPC) EXPECT() *MockReverseRPCMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReverseRPC) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReverseRPCMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReverseRPC)(nil).Close))
}

// IsConnected mocks base method.
func (m *MockReverseRPC) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockReverseRPCMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockReverseRPC)(nil).IsConnected))
}

// Register mocks base method.
func (m *MockReverseRPC) Register(method string, hdl *reverse_rpc.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", method, hdl)
}

// Register indicates an expected call of Register.
func (mr *MockReverseRPCMockRecorder) Register(method, hdl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockReverseRPC)(nil).Register), method, hdl)
}

// RegisterMetrics mocks base method.
func (m *MockReverseRPC) RegisterMetrics(responseTime *prometheus.HistogramVec, errorCount *prometheus.GaugeVec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMetrics", responseTime, errorCount)
}

// RegisterMetrics indicates an expected call of RegisterMetrics.
func (mr *MockReverseRPCMockRecorder) RegisterMetrics(responseTime, errorCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMetrics", reflect.TypeOf((*MockReverseRPC)(nil).RegisterMetrics), responseTime, errorCount)
}
